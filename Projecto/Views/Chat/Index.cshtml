@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "_LayoutChat";

}
<section id="app" class="section section-lg bg-soft pt-5 mt-5">
    <div class="container">
        <div class="row justify-content-between align-items-center mb-5 mb-lg-7">
            <div class="row justify-content-between align-items-center mt-5">
                <div id="frame">
                    <div id="sidepanel">
                        <div id="profile">
                            <div class="wrap">
                                <img id="profile-img" src="~/img/about-me.jpg" class="online" alt="" />
                                <p>
                                    @ViewData["nickname"]
                                </p>
                                <i class="fa fa-chevron-down expand-button" aria-hidden="true"></i>
                                <div id="status-options">
                                    <ul>
                                        <li id="status-online" class="active">
                                            <span class="status-circle"></span>
                                            <p>Online</p>
                                        </li>
                                        <li id="status-away">
                                            <span class="status-circle"></span>
                                            <p>Away</p>
                                        </li>
                                        <li id="status-busy">
                                            <span class="status-circle"></span>
                                            <p>Busy</p>
                                        </li>
                                        <li id="status-offline">
                                            <span class="status-circle"></span>
                                            <p>Offline</p>
                                        </li>
                                    </ul>
                                </div>
                                <!--
    <div id="expanded">
        <label for="twitter"><i class="fa fa-facebook fa-fw" aria-hidden="true"></i></label>
        <input name="twitter" type="text" value="mikeross" />
        <label for="twitter"><i class="fa fa-twitter fa-fw" aria-hidden="true"></i></label>
        <input name="twitter" type="text" value="ross81" />
        <label for="twitter"><i class="fa fa-instagram fa-fw" aria-hidden="true"></i></label>
        <input name="twitter" type="text" value="mike.ross" />
    </div>
                                    -->
                            </div>
                        </div>
                        <div id="search">
                            <label for=""><i class="fa fa-search" aria-hidden="true"></i></label>
                            <input type="text" placeholder="Search contacts..." v-model="buscarContacto" />
                        </div>
                        <div id="contacts">
                            <ul>
                                <li class="contact" v-for="contacto in losContactos" v-bind:class="contacto === contactoActivo ? 'active' : ''" v-on:click="contactoActivo = contacto">
                                    <div class="wrap">
                                        <span class="contact-status online"></span>
                                        <img src="~/img/intercom_icon.svg" alt="" />
                                        <div class="meta">
                                            <p class="name">{{ contacto }}</p>
                                            <p class="preview">{{ messages.filter(msg => msg.emisor === contacto).length > 0 ? messages.filter(msg => msg.emisor === contacto)[0].cuerpo : '' }}</p>
                                        </div>
                                    </div>
                                </li>
                                
                            </ul>
                        </div>
                        <div id="bottom-bar">
                            <input type="text" placeholder="Nombre del Contacto" v-model="nuevoContacto" />
                            <button id="addcontact" v-on:click="agregarContacto">
                                <i class="fa fa-user-plus fa-fw" aria-hidden="true"></i> <span>
                                    Add
                                    contact
                                </span>
                            </button>

                        </div>
                    </div>
                    <div class="content" style="margin: 0px; padding: 0px;">
                        <div class="contact-profile">
                            <img src="~/img/intercom_icon.svg" alt="" />
                            <p>{{ contactoActivo }}</p>
                            <div class="social-media">
                                <input type="text" placeholder="Search messages..." v-model="buscarMensaje" class="form-control" />
                            </div>
                            
                            
                        </div>

                        <div class="messages">
                            <ul>
                                <li v-for="message in losMensajes" v-bind:class="message.emisor !== me ? 'sent' : 'replies'">
                                    <img v-show="message.emisor !== me" src="~/img/intercom_icon.svg" alt="" />
                                    <img v-show="message.emisor === me" src="~/img/about-me.jpg" alt="" />
                                    <p v-bind:class="message.emisor !== me ? 'text-light' : 'text-dark'">
                                        <span v-if="buscarMensaje.length > 0" v-show="message.emisor === me" class="text-danger">Para: {{ message.receptor }}<br /></span>
                                        <span v-if="buscarMensaje.length > 0" v-show="message.recetor === me" class="text-danger">De: {{ message.emisor }}<br /></span>
                                        {{ message.cuerpo }}
                                    </p>
                                </li>
                                
                            </ul>
                        </div>

                        <div class="message-input">
                            <div class="wrap d-flex">
                                <input type="text" placeholder="Write your message..." v-model="texto" class="float-left form-control" />

                                <button class="submit float-end" v-on:click="enviarMensaje">Enviar</button>
                                <button class="submit float-end" v-on:click="enviarMensaje">Adjuntar</button>
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>
</section>

<script>
    var app = new Vue({
        el: '#app',
        data() {
            return {
                me: '@ViewData["nickname"]',
                contactos: [],
                messages: [],
                contactoActivo: "",
                buscarContacto: "",
                texto: "",
                nuevoContacto: "",
                buscarMensaje: ""
            }
        },
        computed: {
            losMensajes() {
                if (this.messages.length > 0) {
                    if (this.buscarMensaje === '') {
                        return this.messages.filter(msg => msg.emisor === this.contactoActivo || msg.receptor === this.contactoActivo);
                    } else {
                        return this.messages.filter(msg => msg.cuerpo.toLowerCase().includes(this.buscarMensaje.toLowerCase()))
                    }

                }
                return [];
            },
            losContactos() {
                if (this.contactos.length > 0) {
                    return this.contactos.filter(con => con.toLowerCase().includes(this.buscarContacto.toLowerCase()) || this.buscarContacto === '');
                }
                return [];
            }
        },
        async mounted() {
            await this.obtieneContactos();
            await this.obtieneMensajes();
            this.revisarSiHayMensajes()

        },
        methods: {
            async obtieneContactos () {
                try {
                    // obtiene contactos
                    var result = await fetch("/Menu/MisContactJson");
                    var contactos = await result.json();
                    this.contactos = contactos[0].contactosAmigos;
                    console.log("resultados", this.contactos);
                    this.contactoActivo = this.contactos[0];
                } catch (ex) {
                    console.log("No se encontraron contactos");
                }
            },
            async obtieneMensajes() {
                try {
                    // obtiene mensajes
                    var resultMsg;
                    var messages = [];
                    var actualizaMensajes = this.actualizaMensajes;
                    this.contactos.forEach(async function (contacto) {
                        resultMsg = await fetch("/Mensajes/AllMyMessages?id=" + contacto);
                        messages = await resultMsg.json();
                        console.log("resultados msg", messages);
                        actualizaMensajes(messages, contacto);
                    });

                } catch (ex) {
                    console.log("No se encontraron mensajes");
                }
            },
            actualizaMensajes(mensajesNuevos, contacto) {
                // revisa si hay nuevos mensajes
                var messages = this.messages;
                if (Array.isArray(mensajesNuevos)) {
                    // Agrega los mensajes nuevo
                    mensajesNuevos.forEach(function (msg) {
                        var viejos = messages.filter(x => x.id === msg.id);
                        if (Array.isArray(viejos)) {
                            if (viejos.length <= 0) {
                                messages.push(msg);
                            }
                        }
                    });
                    // elimina los mensajes que ya no existen
                    messages.forEach(function (msg, index) {
                        var viejos = mensajesNuevos.filter(x => x.id === msg.id);
                        if (Array.isArray(viejos)) {
                            if (viejos.length <= 0) {
                                if (msg.emisor === contacto || msg.receptor === contacto) {
                                    messages.splice(index, 1);
                                }
                                
                            }
                        }
                    });
                }
            },
            async enviarMensaje() {
                try {
                    // envia mensaje para el contacto activo
                    var para = this.contactoActivo;
                    var texto = this.texto;
                    var result = await fetch("/Mensajes/NuevoMensajeJson", {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            para: para,
                            texto: texto
                        })
                    });
                    var response = await result.json();
                    console.log("enviado ", response);
                    this.texto = "";
                    this.obtieneMensajes();

                } catch (ex) {
                    console.log("No se envio el mensaje");
                }
            },
            async enviarArchivo() {
                try {
                    // envia mensaje para el contacto activo
                    var para = this.contactoActivo;
                    var file = this.file;
                    var result = await fetch("/Mensajes/NuevoMensajeJson", {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            para: para,
                            texto: texto
                        })
                    });
                    var response = await result.json();
                    console.log("enviado ", response);
                    this.texto = "";
                    this.obtieneMensajes();

                } catch (ex) {
                    console.log("No se envio el mensaje");
                }
            },
            agregarContacto() {
                this.nuevoContacto = "";
            },
            revisarSiHayMensajes() {
                var obtieneMensajes = this.obtieneMensajes;
                setInterval(function () {
                    obtieneMensajes();
                }, 10000);
            }
        }
    });
</script>